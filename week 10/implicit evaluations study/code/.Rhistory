# disable scientific notation
options(scipen = 999)
library(ggdist)
library(ggrain)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
library(ggExtra)
library(patchwork)
library(ggrepel)
library(remotes)
library(ggmagnify)
library(report)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(AMP_score, na.rm = TRUE),
SD = sd(AMP_score, na.rm = TRUE),
n = n()) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "AMP Score" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score,
y = mean_evaluation, color = gender)) +
geom_point(alpha = 0.7) + # turning down alpha a bit so you can see where are more points and where are less
geom_smooth(se = FALSE, method = "lm") +
theme_classic() +
xlab("AMP Score")+
ylab("Mean evaluation")
ggMarginal(p, groupColour = TRUE, groupFill = TRUE)
data_processed_after_exclusions_women <- data_processed_after_exclusions |>
filter(gender == "female")
p_women <- ggplot(data_processed_after_exclusions_women,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter()+
ggtitle("female")
p_women <- ggMarginal(p_women, type = "histogram")
data_processed_after_exclusions_men <- data_processed_after_exclusions |>
filter(gender == "male")
p_men <- ggplot(data_processed_after_exclusions_men,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter() +
ggtitle("male")
p_men <- ggMarginal(p_men, type = "histogram")
data_processed_after_exclusions_nonbinary <- data_processed_after_exclusions |>
filter(gender == "nonbinary")
p_nonbinary <- ggplot(data_processed_after_exclusions_nonbinary,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter() +
ggtitle("nonbinary")
p_nonbinary <- ggMarginal(p_nonbinary, type = "histogram")
list(p_women, p_men, p_nonbinary) |>
wrap_plots()
p_label_points <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_jitter() +
geom_text_repel(max.overlaps = 100) +
theme_classic() +
xlab("AMP Score")+
ylab("Mean evaluation")
p_label_points
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score,
y = mean_evaluation, color = gender)) +
geom_jitter() +
geom_smooth(se = FALSE, method = "lm") +
theme_classic() +
xlab("AMP Score")+
ylab("Mean evaluation")
from <- c(xmin = 0.46, xmax = 0.65, ymin = 0.75, ymax = 1.2)
to <- c(xmin = 0, xmax = 0.25, ymin = 4, ymax = 5)
p + geom_magnify(from = from, to = to)
cor.test(data_processed_after_exclusions$AMP_score, data_processed_after_exclusions$mean_evaluation, method="spearman")
# get only female and male in the dataset
data_processed_after_exclusions_without_nonbinary <- subset(data_processed_after_exclusions, gender %in% c("female", "male"))
p_hist <- ggplot(data_processed_after_exclusions_without_nonbinary, aes(x = mean_evaluation, fill = gender)) +
geom_histogram(binwidth = 1,
boundary = 0) +
labs(title = "Self-reported Evaluations by Gender",
x = "Mean evaluation",
y = "Frequency") +
theme_classic() +
theme(legend.position = "none")+
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank()) +
facet_wrap(~gender, scales = "free")
p_hist
p_violin <- ggplot(data_processed_after_exclusions_without_nonbinary, aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_violin() +
labs(title = "Self-reported Evaluations by Gender",
x = "Gender",
y = "Mean evaluation") +
theme_minimal()
p_violin
p_raincloud <- ggplot(data_processed_after_exclusions_without_nonbinary, aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_rain() +
labs(title = "Self-reported Evaluations by Gender",
x = "Gender",
y = "Mean evaluation") +
theme_classic()
p_raincloud
t.test(mean_evaluation~gender, data = data_processed_after_exclusions_without_nonbinary, alternative = "two.sided")
data_processed_after_exclusions_without_nonbinary_reordered <- data_processed_after_exclusions_without_nonbinary |>
mutate(gender = factor(gender, levels = c("male", "female")))
p_hist2 <- ggplot(data_processed_after_exclusions_without_nonbinary_reordered, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.1,
boundary = 0) +
scale_fill_discrete(labels=c('Men', 'Women'))+
labs(title = "AMP Score by Gender",
x = "Mean evaluation",
y = "Frequency") +
theme_classic() +
theme(legend.position = "none")+
theme(panel.grid.minor = element_blank()) +
facet_wrap(~gender, scales = "free",
labeller = labeller(gender = c("male" = "Men", "female" = "Women")))
p_hist2
p_violin2 <- ggplot(data_processed_after_exclusions_without_nonbinary_reordered, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
labs(title = "AMP Score by Gender",
fill = "Gender",
x = "Gender",
y = "AMP Score") +
scale_fill_discrete(labels=c('Men', 'Women'))+
scale_x_discrete(labels=c('Men', 'Women'))+
theme_minimal()
p_violin2
p_raincloud2 <- ggplot(data_processed_after_exclusions_without_nonbinary_reordered, aes(x = gender, y = AMP_score, fill = gender)) +
geom_rain() +
labs(title = "AMP Score by Gender",
x = "Gender",
y = "AMP Score") +
scale_fill_discrete(labels=c('Men', 'Women'))+
scale_x_discrete(labels=c('Men', 'Women'))+
theme_classic()
p_raincloud2
t.test(AMP_score~gender, data = data_processed_after_exclusions_without_nonbinary, var.equal = TRUE, alternative = "two.sided")
report(t.test(data_processed_after_exclusions_without_nonbinary$AMP_score~data_processed_after_exclusions_without_nonbinary$gender, var.equal = TRUE, alternative = "two.sided"))
combined_plot <- p_hist2 + p_violin2 + p_raincloud2
combined_plot
dir.create("../data/plots/")
ggsave("../data/plots/combined_plot.png", width = 20, plot = combined_plot, dpi = 300, device = "png")
ggsave("../data/plots/combined_plot.pdf", width = 20, plot = combined_plot, dpi = 300, device = "pdf")
sessionInfo()
p_raincloud2 <- ggplot(data_processed_after_exclusions_without_nonbinary_reordered, aes(x = gender, y = AMP_score, fill = gender)) +
geom_rain() +
labs(title = "AMP Score by Gender",
x = "Gender",
fill = "Gender",
y = "AMP Score") +
scale_fill_discrete(labels=c('Men', 'Women'))+
scale_x_discrete(labels=c('Men', 'Women'))+
theme_classic()
p_raincloud2
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(ggdist)
library(ggrain)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
library(ggExtra)
library(patchwork)
library(ggrepel)
library(remotes)
library(ggmagnify)
library(report)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(AMP_score, na.rm = TRUE),
SD = sd(AMP_score, na.rm = TRUE),
n = n()) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "AMP Score" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score,
y = mean_evaluation, color = gender)) +
geom_point(alpha = 0.7) + # turning down alpha a bit so you can see where are more points and where are less
geom_smooth(se = FALSE, method = "lm") +
theme_classic() +
xlab("AMP Score")+
ylab("Mean evaluation")
ggMarginal(p, groupColour = TRUE, groupFill = TRUE)
data_processed_after_exclusions_women <- data_processed_after_exclusions |>
filter(gender == "female")
p_women <- ggplot(data_processed_after_exclusions_women,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter()+
ggtitle("female")
p_women <- ggMarginal(p_women, type = "histogram")
data_processed_after_exclusions_men <- data_processed_after_exclusions |>
filter(gender == "male")
p_men <- ggplot(data_processed_after_exclusions_men,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter() +
ggtitle("male")
p_men <- ggMarginal(p_men, type = "histogram")
data_processed_after_exclusions_nonbinary <- data_processed_after_exclusions |>
filter(gender == "nonbinary")
p_nonbinary <- ggplot(data_processed_after_exclusions_nonbinary,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter() +
ggtitle("nonbinary")
p_nonbinary <- ggMarginal(p_nonbinary, type = "histogram")
list(p_women, p_men, p_nonbinary) |>
wrap_plots()
p_label_points <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_jitter() +
geom_text_repel(max.overlaps = 100) +
theme_classic() +
xlab("AMP Score")+
ylab("Mean evaluation")
p_label_points
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score,
y = mean_evaluation, color = gender)) +
geom_jitter() +
geom_smooth(se = FALSE, method = "lm") +
theme_classic() +
xlab("AMP Score")+
ylab("Mean evaluation")
from <- c(xmin = 0.46, xmax = 0.65, ymin = 0.75, ymax = 1.2)
to <- c(xmin = 0, xmax = 0.25, ymin = 4, ymax = 5)
p + geom_magnify(from = from, to = to)
cor.test(data_processed_after_exclusions$AMP_score, data_processed_after_exclusions$mean_evaluation, method="spearman")
# get only female and male in the dataset
data_processed_after_exclusions_without_nonbinary <- subset(data_processed_after_exclusions, gender %in% c("female", "male"))
p_hist <- ggplot(data_processed_after_exclusions_without_nonbinary, aes(x = mean_evaluation, fill = gender)) +
geom_histogram(binwidth = 1,
boundary = 0) +
labs(title = "Self-reported Evaluations by Gender",
x = "Mean evaluation",
y = "Frequency") +
theme_classic() +
theme(legend.position = "none")+
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank()) +
facet_wrap(~gender, scales = "free")
p_hist
p_violin <- ggplot(data_processed_after_exclusions_without_nonbinary, aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_violin() +
labs(title = "Self-reported Evaluations by Gender",
x = "Gender",
y = "Mean evaluation") +
theme_minimal()
p_violin
p_raincloud <- ggplot(data_processed_after_exclusions_without_nonbinary, aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_rain() +
labs(title = "Self-reported Evaluations by Gender",
x = "Gender",
y = "Mean evaluation") +
theme_classic()
p_raincloud
t.test(mean_evaluation~gender, data = data_processed_after_exclusions_without_nonbinary, alternative = "two.sided")
data_processed_after_exclusions_without_nonbinary_reordered <- data_processed_after_exclusions_without_nonbinary |>
mutate(gender = factor(gender, levels = c("male", "female")))
p_hist2 <- ggplot(data_processed_after_exclusions_without_nonbinary_reordered, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.1,
boundary = 0) +
scale_fill_discrete(labels=c('Men', 'Women'))+
labs(title = "AMP Score by Gender",
x = "Mean evaluation",
y = "Frequency") +
theme_classic() +
theme(legend.position = "none")+
theme(panel.grid.minor = element_blank()) +
facet_wrap(~gender, scales = "free",
labeller = labeller(gender = c("male" = "Men", "female" = "Women")))
p_hist2
p_violin2 <- ggplot(data_processed_after_exclusions_without_nonbinary_reordered, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
labs(title = "AMP Score by Gender",
fill = "Gender",
x = "Gender",
y = "AMP Score") +
scale_fill_discrete(labels=c('Men', 'Women'))+
scale_x_discrete(labels=c('Men', 'Women'))+
theme_minimal()
p_violin2
p_raincloud2 <- ggplot(data_processed_after_exclusions_without_nonbinary_reordered, aes(x = gender, y = AMP_score, fill = gender)) +
geom_rain() +
labs(title = "AMP Score by Gender",
x = "Gender",
fill = "Gender",
y = "AMP Score") +
scale_fill_discrete(labels=c('Men', 'Women'))+
scale_x_discrete(labels=c('Men', 'Women'))+
theme_classic()
p_raincloud2
t.test(AMP_score~gender, data = data_processed_after_exclusions_without_nonbinary, var.equal = TRUE, alternative = "two.sided")
report(t.test(data_processed_after_exclusions_without_nonbinary$AMP_score~data_processed_after_exclusions_without_nonbinary$gender, var.equal = TRUE, alternative = "two.sided"))
combined_plot <- p_hist2 + p_violin2 + p_raincloud2
combined_plot
dir.create("../data/plots/")
ggsave("../data/plots/combined_plot.png", width = 20, plot = combined_plot, dpi = 300, device = "png")
ggsave("../data/plots/combined_plot.pdf", width = 20, plot = combined_plot, dpi = 300, device = "pdf")
sessionInfo()
