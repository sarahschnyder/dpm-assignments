stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x - width / 2,
xmax = x)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data,
xmaxv = x,
xminv = x + violinwidth * (xmin - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
p_raincloud <- ggplot(data_processed_after_exclusions,aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_flat_violin() +
geom_boxplot(
width = .1,
position= position_nudge(x=.1),
outlier.color = NA
)+
stat_dots(
side = "right",
position= position_nudge(x=.2)
) +
labs(title = "Self-reported Evaluations by Gender",
x = "Gender",
y = "Mean evaluation") +
theme_minimal()
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(ggdist)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
library(ggExtra)
library(patchwork)
library(ggrepel)
library(remotes)
library(ggmagnify)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score,
y = mean_evaluation, color = gender)) +
geom_jitter() +
geom_smooth(se = FALSE, method = "lm") +
theme_classic() +
xlab("AMP Score")+
ylab("Mean evaluation")
ggMarginal(p, groupColour = TRUE, groupFill = TRUE)
data_processed_after_exclusions_women <- data_processed_after_exclusions |>
filter(gender == "female")
p_women <- ggplot(data_processed_after_exclusions_women,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter()+
ggtitle("female")
p_women <- ggMarginal(p_women, type = "histogram")
data_processed_after_exclusions_men <- data_processed_after_exclusions |>
filter(gender == "male")
p_men <- ggplot(data_processed_after_exclusions_men,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter() +
ggtitle("male")
p_men <- ggMarginal(p_men, type = "histogram")
data_processed_after_exclusions_nonbinary <- data_processed_after_exclusions |>
filter(gender == "nonbinary")
p_nonbinary <- ggplot(data_processed_after_exclusions_nonbinary,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter() +
ggtitle("nonbinary")
p_nonbinary <- ggMarginal(p_nonbinary, type = "histogram")
list(p_women, p_men, p_nonbinary) |>
wrap_plots()
p_label_points <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_jitter() +
geom_text_repel(max.overlaps = 100) +
theme_classic() +
xlab("AMP Score")+
ylab("Mean evaluation")
p_label_points
p <- ggplot(data_processed_after_exclusions, aes(x = AMP_score,
y = mean_evaluation, color = gender)) +
geom_jitter() +
geom_smooth(se = FALSE, method = "lm") +
theme_classic() +
xlab("AMP Score")+
ylab("Mean evaluation")
from <- c(xmin = 0.46, xmax = 0.65, ymin = 0.75, ymax = 1.2)
to <- c(xmin = 0, xmax = 0.25, ymin = 4, ymax = 5)
p + geom_magnify(from = from, to = to)
cor.test(data_processed_after_exclusions$AMP_score, data_processed_after_exclusions$mean_evaluation, method="spearman")
p_hist <- ggplot(data_processed_after_exclusions, aes(x = mean_evaluation, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 1) +
labs(title = "Self-reported Evaluations by Gender",
x = "Mean evaluation",
y = "Frequency") +
theme_minimal()
p_hist
p_violin <- ggplot(data_processed_after_exclusions, aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_violin() +
labs(title = "Self-reported Evaluations by Gender",
x = "Gender",
y = "Mean evaluation") +
theme_minimal()
p_violin
# stat_halfeye doesn't work with the variable mean_evaluation
# i think because it's not normally distributed
# so i got this function from someone on stackoverflow
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x - width / 2,
xmax = x)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data,
xmaxv = x,
xminv = x + violinwidth * (xmin - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
p_raincloud <- ggplot(data_processed_after_exclusions,aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_flat_violin() +
geom_boxplot(
width = .1,
position= position_nudge(x=.1),
outlier.color = NA
)+
stat_dots(
side = "right",
position= position_nudge(x=.2)
) +
labs(title = "Self-reported Evaluations by Gender",
x = "Gender",
y = "Mean evaluation") +
theme_minimal()
p_raincloud
# for the test between men and women we exclude the nonbinary
data_processed_after_exclusions_without_nonbinary <- data_processed_after_exclusions |>
filter(gender != "nonbinary")
t.test(data_processed_after_exclusions_without_nonbinary$mean_evaluation~data_processed_after_exclusions_without_nonbinary$gender, var.equal = TRUE, alternative = "two.sided")
data_processed_after_exclusions_reordered <- data_processed_after_exclusions |>
mutate(gender = factor(gender, levels = c("male", "female", "nonbinary")))
p_hist2 <- ggplot(data_processed_after_exclusions_reordered, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.2) +
scale_fill_discrete(labels=c('Men', 'Women', 'Nonbinary'))+
labs(title = "AMP Score by Gender",
x = "AMP Score",
y = "Frequency",
fill = "Gender") +
theme_minimal()
p_hist2
p_violin2 <- ggplot(data_processed_after_exclusions_reordered, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
labs(title = "AMP Score by Gender",
fill = "Gender",
x = "Gender",
y = "AMP Score") +
scale_fill_discrete(labels=c('Men', 'Women', 'Nonbinary'))+
scale_x_discrete(labels=c('Men', 'Women', 'Nonbinary'))+
theme_minimal()
p_violin2
p_raincloud2 <- ggplot(data_processed_after_exclusions_reordered,aes(x = gender, y = AMP_score, fill = gender)) +
stat_halfeye(side = "left",
adjust = 0.5,
# remove the slub interval
.width = 0,
point_colour = NA) +
geom_boxplot(
width = .1,
position= position_nudge(x=.1),
outlier.color = NA
)+
stat_dots(
side = "right",
position= position_nudge(x=.2),
dotsize = 0.2
) +
labs(title = "AMP Score by Gender",
fill = "Gender",
x = "Gender",
y = "AMP Score") +
scale_fill_discrete(labels=c('Men', 'Women', 'Nonbinary'))+
scale_x_discrete(labels=c('Men', 'Women', 'Nonbinary'))+
theme_minimal()
p_raincloud2
# for the test between men and women we exclude the nonbinary
data_processed_after_exclusions_without_nonbinary <- data_processed_after_exclusions |>
filter(gender != "nonbinary")
t.test(data_processed_after_exclusions_without_nonbinary$AMP_score~data_processed_after_exclusions_without_nonbinary$gender, var.equal = TRUE, alternative = "two.sided")
combined_plot <- p_hist2 + p_violin2 + p_raincloud2
combined_plot
dir.create("../data/plots/")
ggsave("../data/plots/combined_plot.png", width = 20, plot = combined_plot, dpi = 300, device = "png")
ggsave("../data/plots/combined_plot.pdf", width = 20, plot = combined_plot, dpi = 300, device = "pdf")
sessionInfo()
library(report)
report(t.test(data_processed_after_exclusions_without_nonbinary$AMP_score~data_processed_after_exclusions_without_nonbinary$gender, var.equal = TRUE, alternative = "two.sided"))
View(data_processed_after_exclusions)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
group_by(subject) |>
count() |>
ungroup() |>
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) |>
select(-n)
# data_amp_completeness |>
#   count(n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
data_amp_score_congruence <- data_amp_raw |>
select(subject, evaluative_response = correct, trialcode, blockcode) |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(trialcode = case_when(trialcode == "prime_positive" ~ 1,
trialcode == "prime_negative" ~ 0,
TRUE ~ NA),
prime_congruence = ifelse(trialcode == evaluative_response, 1, 0))
# sanity check 1: if you consider all the combiantions of factor levels of trialcode, evaluative_response, and prime congruence, there should be only 4:
data_amp_score_congruence |>
count(trialcode, evaluative_response, prime_congruence)
data_amp_score_congruence |>
count(trialcode, evaluative_response, prime_congruence) |>
nrow() == 4
# calculate AMP score
data_amp_score <- data_amp_score_congruence |>
group_by(subject) |>
summarize(AMP_score = mean(prime_congruence, na.rm = TRUE)) |>
select(subject, AMP_score)
# sanity check 2: check if AMP_score is numeric
is.numeric(data_amp_score$AMP_score)
# sanity check 3: check if AMP_score is bounded [0,1]
data_amp_score |>
mutate(bounded_correctly = between(AMP_score, left = 0, right = 1)) |>
filter(bounded_correctly != TRUE) |>
nrow() == 0
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_score, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject") |>
full_join(data_amp_completeness, by = "subject")
# flag all subjects with more than one row in the wide-format data. these should be excluded in the analysis.
# a more elaborate approach would be to track down the individual dupicate cases and determine which of the mulitiple cases should be retained.
data_processed_duplicates <- data_processed_temp |>
count(subject) |>
mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include")) |>
select(-n)
# join in the duplicates df
data_processed_before_exclusions <- data_processed_temp |>
full_join(data_processed_duplicates, by = "subject")
# create a master exclude_participant variable
data_processed <- data_processed_before_exclusions |>
mutate(exclude_participant = case_when(tolower(age) == "test" ~ "exclude",
tolower(gender) == "test" ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
# in this case we will exclude participants with missing demographics data or outcomes measures data.
# Note that "list-wise exclusions" like this aren't always justified, as missingness often isn't at random.
# How to treat missing data is a  whole area of work in itself, which we wont cover here.
is.na(age) ~ "exclude",
is.na(gender) ~ "exclude",
exclude_amp_performance == "exclude" ~ "exclude",
exclude_duplicate_data == "exclude" ~ "exclude",
exclude_amp_completeness == "exclude" ~ "exclude",
TRUE ~ "include"))
# in case this dir doesn't exist, create it
dir.create("../data/processed/")
# save data to disk in that dir
write_csv(data_processed, "../data/processed/data_processed.csv")
if(!file.exists("../data/processed/data_processed_codebook.xlsx")){
# convert the column names to a df
codebook_template <- data.frame(variable = colnames(data_processed)) |>
mutate(explanation = NA)
# write to disk as an excel file
write.xlsx(codebook_template, file = "../data/processed/data_processed_codebook.xlsx")
}
sessionInfo()
View(data_amp_score_congruence)
View(data_selfreport_mean_score)
View(data_selfreport_trial_level)
View(data_amp_raw)
