filter(block_number %in% c(4, 7)) %>%
summarise(mean2 = mean(trial_reaction_time_in_ms)) %>%
left_join(data_iat_without_practice_grouped_means, by = "unique_id")
# Calculate SD of RTs for blocks 3, 4, 6, and 7 for each unique_id
data_iat_without_practice_grouped_sd <- data_iat_without_practice_grouped %>%
filter(block_number %in% c(3, 4, 6, 7)) %>%
summarise(SD = sd(trial_reaction_time_in_ms))
# Calculate D for each unique_id
data_iat_without_practice_D_score <- data_iat_without_practice_grouped_means %>%
left_join(data_iat_without_practice_grouped_sd, by = "unique_id") %>%
mutate(D_score = (mean2 - mean1) / SD) |>
select(unique_id, D_score) |>
ungroup()
# Print the new df
print(data_iat_without_practice_D_score)
# sanity check: Are all D scores in the range -2 to +2?
if (all(data_iat_without_practice_D_score$D_score >= -2 & data_iat_without_practice_D_score$D_score <= 2)) {
print("All D scores are in the range -2 to +2.")
} else {
print("Some D scores are outside the range -2 to +2.")
}
# getting a vector with all the IDs that don't have 120 trials
iat_exclusion_incomplete_trial <- data_iat_without_practice |>
group_by(unique_id) |>
filter(all(c(3, 4, 6, 7) %in% block_number) & n() != 120) |>
pull(unique_id) |>
unique()
# getting a vector with all the Ids that have < 300 ms reactions times in more than 10% of the trials
data_iat_without_practice_rt <-
data_iat_without_practice |>
mutate(short_rt = ifelse(trial_reaction_time_in_ms < 300, "short", "ok"))
iat_exclusion_short_rt <- data_iat_without_practice_rt |>
group_by(unique_id) |>
mutate(proportion_short_rt = sum(short_rt == "short")/ n()) |>
filter(proportion_short_rt > 0.10) |>
pull(unique_id) |>
unique()
# getting a vector with all the Ids that have an accuracy < 75%
iat_exclusion_low_accuracy <- data_iat_without_practice |>
group_by(unique_id) |>
mutate(accuracy = sum(trial_accuracy == "correct")/ n()) |>
filter(accuracy < 0.75) |>
pull(unique_id) |>
unique()
# create one vector with all the Ids that meet at one of the exclusion criteria
iat_exclusion <- c(iat_exclusion_incomplete_trial, iat_exclusion_short_rt, iat_exclusion_low_accuracy)
data_iat_without_practice_D_exclusions <-
data_iat_without_practice_D_score |>
mutate(exclude_iat = case_when(unique_id %in% iat_exclusion ~ "exclude",
TRUE ~ "include"))
data_processed <-
data_demographics_wide |>
full_join(data_bfi_reverse_scored_exclusion_variable, by = "unique_id") |>
full_join(data_iat_without_practice_D_exclusions, by = "unique_id")
data_processed
print(data_processed)
data_processed_master_exclude <-
data_processed |>
mutate(exclusion = ifelse(exclude_between_1_and_6 == "exclude" |
exclude_incomplete_data == "exclude" |
exclude_iat == "exclude"),
"exclude",
"include")
data_processed_master_exclude <-
data_processed_master_exclude <-
data_processed |>
mutate(exclusion = ifelse(exclude_between_1_and_6 == "exclude" |
exclude_incomplete_data == "exclude" |
exclude_iat == "exclude",
"exclude",
"include")
)
data_processed_master_exclude
data_processed_master_exclude <-
data_processed |>
mutate(exclusion = ifelse(exclude_between_1_and_6 == "exclude" |
exclude_incomplete_data == "exclude" |
exclude_iat == "exclude",
"exclude",
"include")
) |>
select(-c(exclude_between_1_and_6, exclude_incomplete_data, exclude_iat))
data_processed_master_exclude
sum(data_processed_master_exclude == "exclude")
data_processed_master_exclude
sum(data_processed_master_exclude$exclusion == "exclude")
data_processed_master_exclude
data_processed_master_exclude$exclusion
View(data_processed_master_exclude)
data_processed_master_exclude <-
data_processed |>
mutate(exclusion = ifelse(exclude_between_1_and_6 == "exclude" |
exclude_incomplete_data == "exclude" |
exclude_iat == "exclude",
"exclude",
"include")
) |>
select(-c(exclude_between_1_and_6, exclude_incomplete_data, exclude_iat))
sum(data_processed_master_exclude$exclusion == "exclude")
data_processed_master_exclude$exclusion
data_processed_master_exclude <-
data_processed |>
mutate(exclusion = ifelse(exclude_between_1_and_6 == "exclude" |
exclude_incomplete_data == "exclude" |
exclude_iat == "exclude",
"exclude",
"include")
)
data_processed_master_exclude <-
data_processed |>
mutate(
exclusion = case_when(exclude_between_1_and_6 == "exclude" ~ "exclude",
exclude_incomplete_data == "exclude"  ~"exclude",
exclude_iat == "exclude" ~"exclude",
TRUE ~ "include")
)
data_processed_master_exclude
data_processed_master_exclude$exclusion
sum(data_processed_master_exclude$exclusion == "exclude")
sum(data_processed_master_exclude$exclude_between_1_and_6 == "exclude")
sum(data_processed_master_exclude$exclude_between_1_and_6 == "exclude")
sum(data_processed_master_exclude$exclude_between_1_and_6 == "exclude", na.rm = TRUE)
sum(data_processed_master_exclude$exclude_incomplete_data == "exclude", na.rm = TRUE)
sum(data_processed_master_exclude$exclude_iat == "exclude", na.rm = TRUE)
data_processed_master_exclude <-
data_processed |>
mutate(
exclusion = case_when(exclude_between_1_and_6 == "exclude" ~ "exclude",
exclude_incomplete_data == "exclude"  ~"exclude",
exclude_iat == "exclude" ~"exclude",
TRUE ~ "include")
) |>
select(-c(exclude_between_1_and_6, exclude_incomplete_data, exclude_iat))
dir.create("../data/processed/")
# in case this dir doesn't exist, create it
dir.create("../data/processed/")
# save data to disk in that dir
write_csv(data_processed, "../data/processed/data_processed.csv")
if(!file.exists("../data/processed/data_processed_codebook.xlsx")){
# convert the column names to a df
codebook_template <- data.frame(variable = colnames(data_processed)) |>
mutate(explanation = NA)
# write to disk as an excel file
write.xlsx(codebook_template, file = "../data/processed/data_processed_codebook.xlsx")
}
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
library(kableExtra)
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv", skip = 1) |> # skip = 1, because the column names are in the second row
janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# remove the rows that have missing data in the column unique_id.
# These rows are unusable, because I can't match them with other data.
data_demographics_without_missing_ids <-
data_demographics_raw |>
filter(!is.na(unique_id))
# transform data into wide format and check if the data is correct
data_demographics_wide <- data_demographics_without_missing_ids |>
pivot_wider(
names_from = variable,
values_from = response
) |>
mutate(sex = case_when(sex %in% c("f", "m") ~ sex,
TRUE ~ "missing/other/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error")
)
# make vector with all columns, that need to be reverse scored
cols_reverse_score <- c("e2", "e5", "e7",
"c2", "c4", "c5", "c9",
"n2", "n5", "n7",
"a1", "a3", "a6", "a8",
"o7", "o9")
cols_reverse_score <- paste0("bfi_", cols_reverse_score)
max_possible_score <- 6 + 1
data_bfi_reverse_scored <- data_bfi_raw |>
mutate(across(cols_reverse_score, ~ max_possible_score - .))
for(i in c("a", "c", "e", "n", "o")){
data_bfi_reverse_scored_subscale <- data_bfi_reverse_scored %>%
select(contains(paste0("bfi_", i))) # selecting only the columns of one subscale
correlation_matrix <- cor(data_bfi_reverse_scored_subscale, use = "complete.obs") # making a correlation matrix
print(correlation_matrix)
print(ifelse(all(correlation_matrix > 0),
paste0("All the correlations of the subscale ",
i, " are positive."),
paste0("NOT all of the correlations of the subscale ",
i, " are positive."))) # checking if all the correlations are positive
}
# set new variable to include if all the values are between 1 and 6 or are missing value
# set another new variable to include if either all values of one subscale or missing or all values of one subscale are not missing
data_bfi_reverse_scored_exclusion_variable <- data_bfi_reverse_scored |>
rowwise() |>
mutate(exclude_between_1_and_6 = ifelse(
all(c_across(starts_with("bfi_")) %in% 1:6 | is.na(c_across(starts_with("bfi_")))),
"include",
"exclude"
),
exclude_incomplete_data = ifelse(
(all(is.na(c_across(starts_with("bfi_a")))) | all(!is.na(c_across(starts_with("bfi_a"))))) &
(all(is.na(c_across(starts_with("bfi_c")))) | all(!is.na(c_across(starts_with("bfi_c"))))) &
(all(is.na(c_across(starts_with("bfi_e")))) | all(!is.na(c_across(starts_with("bfi_e"))))) &
(all(is.na(c_across(starts_with("bfi_n")))) | all(!is.na(c_across(starts_with("bfi_n"))))) &
(all(is.na(c_across(starts_with("bfi_o")))) | all(!is.na(c_across(starts_with("bfi_o"))))),
"include",
"exclude"
)
)
data_bfi_reverse_scored_exclusion_variable$mean_bfi_a <- rowMeans(select(data_bfi_reverse_scored_exclusion_variable,starts_with("bfi_a")),
na.rm = TRUE)
data_bfi_reverse_scored_exclusion_variable$mean_bfi_c <- rowMeans(select(data_bfi_reverse_scored_exclusion_variable,starts_with("bfi_c")),
na.rm = TRUE)
data_bfi_reverse_scored_exclusion_variable$mean_bfi_e <- rowMeans(select(data_bfi_reverse_scored_exclusion_variable,starts_with("bfi_e")),
na.rm = TRUE)
data_bfi_reverse_scored_exclusion_variable$mean_bfi_n <- rowMeans(select(data_bfi_reverse_scored_exclusion_variable,starts_with("bfi_n")),
na.rm = TRUE)
data_bfi_reverse_scored_exclusion_variable$mean_bfi_o <- rowMeans(select(data_bfi_reverse_scored_exclusion_variable,starts_with("bfi_o")),
na.rm = TRUE)
# check if the means are not smaller than 1 and not bigger than 6
for (i in c("a", "c", "e", "n", "o")){
if(data_bfi_reverse_scored_exclusion_variable |>
mutate(bounded_correctly = between(get(paste0("mean_bfi_", i)), left = 1, right = 6)) |>
filter(bounded_correctly != TRUE) |>
nrow() == 0) {
print(paste0("The mean score of the subscale ", i, " does not violate the min and max possible score."))
} else {
print(paste0("The mean score of the subscale ", i, " does violate the min and max possible score."))
}
}
# removing practice blocks
data_iat_without_practice <-
data_iat_raw |>
filter(!block_number %in% c(1,2,5))
# Group by unique_id
data_iat_without_practice_grouped <- data_iat_without_practice %>%
group_by(unique_id)
# Calculating mean RT for blocks 3 and 6 for each unique_id
data_iat_without_practice_grouped_means <- data_iat_without_practice_grouped %>%
filter(block_number %in% c(3, 6)) %>%
summarise(mean1 = mean(trial_reaction_time_in_ms))
# Calculate mean RT for blocks 4 and 7 for each unique_id
data_iat_without_practice_grouped_means<- data_iat_without_practice_grouped %>%
filter(block_number %in% c(4, 7)) %>%
summarise(mean2 = mean(trial_reaction_time_in_ms)) %>%
left_join(data_iat_without_practice_grouped_means, by = "unique_id")
# Calculate SD of RTs for blocks 3, 4, 6, and 7 for each unique_id
data_iat_without_practice_grouped_sd <- data_iat_without_practice_grouped %>%
filter(block_number %in% c(3, 4, 6, 7)) %>%
summarise(SD = sd(trial_reaction_time_in_ms))
# Calculate D for each unique_id
data_iat_without_practice_D_score <- data_iat_without_practice_grouped_means %>%
left_join(data_iat_without_practice_grouped_sd, by = "unique_id") %>%
mutate(D_score = (mean2 - mean1) / SD) |>
select(unique_id, D_score) |>
ungroup()
# Print the new df
print(data_iat_without_practice_D_score)
# sanity check: Are all D scores in the range -2 to +2?
if (all(data_iat_without_practice_D_score$D_score >= -2 & data_iat_without_practice_D_score$D_score <= 2)) {
print("All D scores are in the range -2 to +2.")
} else {
print("Some D scores are outside the range -2 to +2.")
}
# getting a vector with all the IDs that don't have 120 trials
iat_exclusion_incomplete_trial <- data_iat_without_practice |>
group_by(unique_id) |>
filter(all(c(3, 4, 6, 7) %in% block_number) & n() != 120) |>
pull(unique_id) |>
unique()
# getting a vector with all the Ids that have < 300 ms reactions times in more than 10% of the trials
data_iat_without_practice_rt <-
data_iat_without_practice |>
mutate(short_rt = ifelse(trial_reaction_time_in_ms < 300, "short", "ok"))
iat_exclusion_short_rt <- data_iat_without_practice_rt |>
group_by(unique_id) |>
mutate(proportion_short_rt = sum(short_rt == "short")/ n()) |>
filter(proportion_short_rt > 0.10) |>
pull(unique_id) |>
unique()
# getting a vector with all the Ids that have an accuracy < 75%
iat_exclusion_low_accuracy <- data_iat_without_practice |>
group_by(unique_id) |>
mutate(accuracy = sum(trial_accuracy == "correct")/ n()) |>
filter(accuracy < 0.75) |>
pull(unique_id) |>
unique()
# create one vector with all the Ids that meet at one of the exclusion criteria
iat_exclusion <- c(iat_exclusion_incomplete_trial, iat_exclusion_short_rt, iat_exclusion_low_accuracy)
data_iat_without_practice_D_exclusions <-
data_iat_without_practice_D_score |>
mutate(exclude_iat = case_when(unique_id %in% iat_exclusion ~ "exclude",
TRUE ~ "include"))
data_processed <-
data_demographics_wide |>
full_join(data_bfi_reverse_scored_exclusion_variable, by = "unique_id") |>
full_join(data_iat_without_practice_D_exclusions, by = "unique_id")
print(data_processed)
data_processed_master_exclude <-
data_processed |>
mutate(
exclusion = case_when(exclude_between_1_and_6 == "exclude" ~ "exclude",
exclude_incomplete_data == "exclude"  ~"exclude",
exclude_iat == "exclude" ~"exclude",
TRUE ~ "include")
) |>
select(-c(exclude_between_1_and_6, exclude_incomplete_data, exclude_iat))
# in case this dir doesn't exist, create it
dir.create("../data/processed/")
# save data to disk in that dir
write_csv(data_processed_master_exclude, "../data/processed/data_processed.csv")
if(!file.exists("../data/processed/data_processed_codebook.xlsx")){
# convert the column names to a df
codebook_template <- data.frame(variable = colnames(data_processed_master_exclude)) |>
mutate(explanation = NA)
# write to disk as an excel file
write.xlsx(codebook_template, file = "../data/processed/data_processed_codebook.xlsx")
}
data_processed_master_exclude
if(!file.exists("../data/processed/data_processed_codebook.xlsx")){
# convert the column names to a df
codebook_template <- data.frame(variable = colnames(data_processed_master_exclude)) |>
mutate(explanation = NA)
# write to disk as an excel file
write.xlsx(codebook_template, file = "../data/processed/data_processed_codebook.xlsx")
}
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
library(kableExtra)
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv", skip = 1) |> # skip = 1, because the column names are in the second row
janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# remove the rows that have missing data in the column unique_id.
# These rows are unusable, because I can't match them with other data.
data_demographics_without_missing_ids <-
data_demographics_raw |>
filter(!is.na(unique_id))
# transform data into wide format and check if the data is correct
data_demographics_wide <- data_demographics_without_missing_ids |>
pivot_wider(
names_from = variable,
values_from = response
) |>
mutate(sex = case_when(sex %in% c("f", "m") ~ sex,
TRUE ~ "missing/other/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error")
)
# make vector with all columns, that need to be reverse scored
cols_reverse_score <- c("e2", "e5", "e7",
"c2", "c4", "c5", "c9",
"n2", "n5", "n7",
"a1", "a3", "a6", "a8",
"o7", "o9")
cols_reverse_score <- paste0("bfi_", cols_reverse_score)
max_possible_score <- 6 + 1
data_bfi_reverse_scored <- data_bfi_raw |>
mutate(across(cols_reverse_score, ~ max_possible_score - .))
for(i in c("a", "c", "e", "n", "o")){
data_bfi_reverse_scored_subscale <- data_bfi_reverse_scored %>%
select(contains(paste0("bfi_", i))) # selecting only the columns of one subscale
correlation_matrix <- cor(data_bfi_reverse_scored_subscale, use = "complete.obs") # making a correlation matrix
print(correlation_matrix)
print(ifelse(all(correlation_matrix > 0),
paste0("All the correlations of the subscale ",
i, " are positive."),
paste0("NOT all of the correlations of the subscale ",
i, " are positive."))) # checking if all the correlations are positive
}
# set new variable to include if all the values are between 1 and 6 or are missing value
# set another new variable to include if either all values of one subscale or missing or all values of one subscale are not missing
data_bfi_reverse_scored_exclusion_variable <- data_bfi_reverse_scored |>
rowwise() |>
mutate(exclude_between_1_and_6 = ifelse(
all(c_across(starts_with("bfi_")) %in% 1:6 | is.na(c_across(starts_with("bfi_")))),
"include",
"exclude"
),
exclude_incomplete_data = ifelse(
(all(is.na(c_across(starts_with("bfi_a")))) | all(!is.na(c_across(starts_with("bfi_a"))))) &
(all(is.na(c_across(starts_with("bfi_c")))) | all(!is.na(c_across(starts_with("bfi_c"))))) &
(all(is.na(c_across(starts_with("bfi_e")))) | all(!is.na(c_across(starts_with("bfi_e"))))) &
(all(is.na(c_across(starts_with("bfi_n")))) | all(!is.na(c_across(starts_with("bfi_n"))))) &
(all(is.na(c_across(starts_with("bfi_o")))) | all(!is.na(c_across(starts_with("bfi_o"))))),
"include",
"exclude"
)
)
data_bfi_reverse_scored_exclusion_variable$mean_bfi_a <- rowMeans(select(data_bfi_reverse_scored_exclusion_variable,starts_with("bfi_a")),
na.rm = TRUE)
data_bfi_reverse_scored_exclusion_variable$mean_bfi_c <- rowMeans(select(data_bfi_reverse_scored_exclusion_variable,starts_with("bfi_c")),
na.rm = TRUE)
data_bfi_reverse_scored_exclusion_variable$mean_bfi_e <- rowMeans(select(data_bfi_reverse_scored_exclusion_variable,starts_with("bfi_e")),
na.rm = TRUE)
data_bfi_reverse_scored_exclusion_variable$mean_bfi_n <- rowMeans(select(data_bfi_reverse_scored_exclusion_variable,starts_with("bfi_n")),
na.rm = TRUE)
data_bfi_reverse_scored_exclusion_variable$mean_bfi_o <- rowMeans(select(data_bfi_reverse_scored_exclusion_variable,starts_with("bfi_o")),
na.rm = TRUE)
# check if the means are not smaller than 1 and not bigger than 6
for (i in c("a", "c", "e", "n", "o")){
if(data_bfi_reverse_scored_exclusion_variable |>
mutate(bounded_correctly = between(get(paste0("mean_bfi_", i)), left = 1, right = 6)) |>
filter(bounded_correctly != TRUE) |>
nrow() == 0) {
print(paste0("The mean score of the subscale ", i, " does not violate the min and max possible score."))
} else {
print(paste0("The mean score of the subscale ", i, " does violate the min and max possible score."))
}
}
# removing practice blocks
data_iat_without_practice <-
data_iat_raw |>
filter(!block_number %in% c(1,2,5))
# Group by unique_id
data_iat_without_practice_grouped <- data_iat_without_practice %>%
group_by(unique_id)
# Calculating mean RT for blocks 3 and 6 for each unique_id
data_iat_without_practice_grouped_means <- data_iat_without_practice_grouped %>%
filter(block_number %in% c(3, 6)) %>%
summarise(mean1 = mean(trial_reaction_time_in_ms))
# Calculate mean RT for blocks 4 and 7 for each unique_id
data_iat_without_practice_grouped_means<- data_iat_without_practice_grouped %>%
filter(block_number %in% c(4, 7)) %>%
summarise(mean2 = mean(trial_reaction_time_in_ms)) %>%
left_join(data_iat_without_practice_grouped_means, by = "unique_id")
# Calculate SD of RTs for blocks 3, 4, 6, and 7 for each unique_id
data_iat_without_practice_grouped_sd <- data_iat_without_practice_grouped %>%
filter(block_number %in% c(3, 4, 6, 7)) %>%
summarise(SD = sd(trial_reaction_time_in_ms))
# Calculate D for each unique_id
data_iat_without_practice_D_score <- data_iat_without_practice_grouped_means %>%
left_join(data_iat_without_practice_grouped_sd, by = "unique_id") %>%
mutate(IAT_score = (mean2 - mean1) / SD) |>
select(unique_id, IAT_score) |>
ungroup()
# Print the new df
print(data_iat_without_practice_D_score)
# sanity check: Are all D scores in the range -2 to +2?
if (all(data_iat_without_practice_D_score$IAT_score >= -2 & data_iat_without_practice_D_score$IAT_score <= 2)) {
print("All D scores are in the range -2 to +2.")
} else {
print("Some D scores are outside the range -2 to +2.")
}
# getting a vector with all the IDs that don't have 120 trials
iat_exclusion_incomplete_trial <- data_iat_without_practice |>
group_by(unique_id) |>
filter(all(c(3, 4, 6, 7) %in% block_number) & n() != 120) |>
pull(unique_id) |>
unique()
# getting a vector with all the Ids that have < 300 ms reactions times in more than 10% of the trials
data_iat_without_practice_rt <-
data_iat_without_practice |>
mutate(short_rt = ifelse(trial_reaction_time_in_ms < 300, "short", "ok"))
iat_exclusion_short_rt <- data_iat_without_practice_rt |>
group_by(unique_id) |>
mutate(proportion_short_rt = sum(short_rt == "short")/ n()) |>
filter(proportion_short_rt > 0.10) |>
pull(unique_id) |>
unique()
# getting a vector with all the Ids that have an accuracy < 75%
iat_exclusion_low_accuracy <- data_iat_without_practice |>
group_by(unique_id) |>
mutate(accuracy = sum(trial_accuracy == "correct")/ n()) |>
filter(accuracy < 0.75) |>
pull(unique_id) |>
unique()
# create one vector with all the Ids that meet at one of the exclusion criteria
iat_exclusion <- c(iat_exclusion_incomplete_trial, iat_exclusion_short_rt, iat_exclusion_low_accuracy)
data_iat_without_practice_D_exclusions <-
data_iat_without_practice_D_score |>
mutate(exclude_iat = case_when(unique_id %in% iat_exclusion ~ "exclude",
TRUE ~ "include"))
data_processed <-
data_demographics_wide |>
full_join(data_bfi_reverse_scored_exclusion_variable, by = "unique_id") |>
full_join(data_iat_without_practice_D_exclusions, by = "unique_id")
print(data_processed)
data_processed_master_exclude <-
data_processed |>
mutate(
exclusion = case_when(exclude_between_1_and_6 == "exclude" ~ "exclude",
exclude_incomplete_data == "exclude"  ~"exclude",
exclude_iat == "exclude" ~"exclude",
TRUE ~ "include")
) |>
select(-c(exclude_between_1_and_6, exclude_incomplete_data, exclude_iat))
# in case this dir doesn't exist, create it
dir.create("../data/processed/")
# save data to disk in that dir
write_csv(data_processed_master_exclude, "../data/processed/data_processed.csv")
if(!file.exists("../data/processed/data_processed_codebook.xlsx")){
# convert the column names to a df
codebook_template <- data.frame(variable = colnames(data_processed_master_exclude)) |>
mutate(explanation = NA)
# write to disk as an excel file
write.xlsx(codebook_template, file = "../data/processed/data_processed_codebook.xlsx")
}
if(!file.exists("../data/processed/data_processed_codebook.xlsx")){
# convert the column names to a df
codebook_template <- data.frame(variable = colnames(data_processed_master_exclude)) |>
mutate(explanation = NA)
# write to disk as an excel file
write.xlsx(codebook_template, file = "../data/processed/data_processed_codebook.xlsx")
}
