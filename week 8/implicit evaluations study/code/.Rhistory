knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
group_by(subject) |>
count() |>
ungroup() |>
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) |>
select(-n)
# data_amp_completeness |>
#   count(n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
data_amp_score_first <- data_amp_raw |>
select(subject, evaluative_response = correct, trialcode, blockcode) |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(trialcode_binary = ifelse(trialcode == "prime_positive", 1, 0),
congruence = ifelse(trialcode_binary == evaluative_response, 1, 0))
data_amp_score_first$congruence %in% c(0,1) |> all()
data_amp_congruence <- data_amp_raw |>
select(subject, evaluative_response = correct, trialcode, blockcode) |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(trialcode_binary = ifelse(trialcode == "prime_positive", 1, 0),
congruence = ifelse(trialcode_binary == evaluative_response, 1, 0))
data_amp_congruence$congruence %in% c(0,1) |> all()
data_amp_score <- data_amp_congruence |>
group_by(subject) |>
summarize(amp_score = mean(congruence, na.rm = TRUE)) |>
select(subject, amp_score)
# Check if the new variable is numeric and is between the value 0 and 1
(is.numeric(data_amp_score$amp_score) & data_amp_score$amp_score |> between(0, 1)) |> all()
View(data_amp_congruence)
data_amp_congruence
# Check
# Assuming your data frame is named 'df'
congruence_correct <- with(df, evaluative_response == trialcode_binary)
# Check
# Assuming your data frame is named 'df'
congruence_correct <- with(data_amp_congruence, evaluative_response == trialcode_binary)
# Compare 'congruence' column with derived logic
congruence_correctness <- df$congruence == as.numeric(congruence_correct)
# Compare 'congruence' column with derived logic
congruence_correctness <- data_amp_congruence$congruence == as.numeric(congruence_correct)
# Show the rows where 'congruence' column doesn't match the derived logic
incorrect_congruence <- df[which(!congruence_correctness), ]
# Show the rows where 'congruence' column doesn't match the derived logic
incorrect_congruence <- data_amp_congruence[which(!congruence_correctness), ]
# Output the rows where the 'congruence' column might be incorrect
print(incorrect_congruence)
congruence_correctness
data_amp_congruence
grepl("_positive$", df$trialcode)
grepl("_positive$", data_amp_congruence$trialcode)
# Check
if(data_amp_congruence$evaluative_response == 1 && grepl("_positive$", data_amp_congruence$trialcode)){
congruence == 1
}
# Check
if(data_amp_congruence$evaluative_response == 1 && grepl("_positive$", data_amp_congruence$trialcode)){
data_amp_congruence$congruence == 1
}
data_amp_congruence$evaluative_response == 1
data_amp_congruence$evaluative_response[1]
data_amp_congruence
# Check
for(i in length(data_amp_congruence)){
if(data_amp_congruence$evaluative_response[i] == 1 && grepl("_positive$", data_amp_congruence$trialcode[i])){
data_amp_congruence$congruence == 1
}
}
# Check
for(i in length(data_amp_congruence)){
if(data_amp_congruence$evaluative_response[i] == 1 && grepl("_positive$", data_amp_congruence$trialcode[i])){
print(data_amp_congruence$congruence == 1)
}
}
data_amp_congruence$congruence == 1
# Check
for(i in length(data_amp_congruence)){
print(i)
if(data_amp_congruence$evaluative_response[i] == 1 && grepl("_positive$", data_amp_congruence$trialcode[i])){
print(data_amp_congruence$congruence == 1)
}
}
length(data_amp_congruence)
# Check
for(i in length(data_amp_congruence$subject)){
print(i)
if(data_amp_congruence$evaluative_response[i] == 1 && grepl("_positive$", data_amp_congruence$trialcode[i])){
print(data_amp_congruence$congruence == 1)
}
}
# Check
for(i in length(data_amp_congruence$subject)){
if(data_amp_congruence$evaluative_response[i] == 1 && grepl("_positive$", data_amp_congruence$trialcode[i])){
print(data_amp_congruence$congruence == 1)
}
}
# Check
for(i in length(data_amp_congruence$subject)){
if(data_amp_congruence$evaluative_response[i] == 1 && grepl("_positive$", data_amp_congruence$trialcode[i]) ||
data_amp_congruence$evaluative_response[i] == 0 && grepl("_negative$", data_amp_congruence$trialcode[i])){
print(data_amp_congruence$congruence == 1)
}
}
data_amp_congruence
# Check
for(i in length(data_amp_congruence$subject)){
if(data_amp_congruence$evaluative_response[i] == 1 && grepl("_positive$", data_amp_congruence$trialcode[i]) ||
data_amp_congruence$evaluative_response[i] == 0 && grepl("_negative$", data_amp_congruence$trialcode[i])){
print(data_amp_congruence$congruence == 1)
} else if (data_amp_congruence$evaluative_response[i] == 0 && grepl("_positive$", data_amp_congruence$trialcode[i]) ||
data_amp_congruence$evaluative_response[i] == 1 && grepl("_negative$", data_amp_congruence$trialcode[i])){
data_amp_congruence == 0
}
}
# Check
# Conditions for checking congruence
condition_1 <- with(data_amp_congruence, trialcode_binary == 1 & grepl("_positive$", trialcode) & evaluative_response == 1)
condition_1
# Check
# Conditions for checking congruence
condition_1 <- with(data_amp_congruence, trialcode_binary == 1 & grepl("_positive$", trialcode) & evaluative_response == 1)
condition_2 <- with(data_amp_congruence, trialcode_binary == 0 & grepl("_negative$", trialcode) & evaluative_response == 0)
condition_3 <- with(data_amp_congruence, trialcode_binary == 0 & grepl("_positive$", trialcode) & evaluative_response == 0)
condition_4 <- with(data_amp_congruence, trialcode_binary == 1 & grepl("_negative$", trialcode) & evaluative_response == 1)
# Create a logical vector indicating if the congruence is as expected
congruence_correctness <- (condition_1 | condition_2) & data_amp_congruence$congruence == 0 |
(condition_3 | condition_4) & data_amp_congruence$congruence == 0
# Output the logical vector indicating congruence correctness
print(congruence_correctness)
# Create a logical vector indicating if the congruence is as expected
congruence_correctness <- (condition_1 | condition_2) & data_amp_congruence$congruence == 1 |
(condition_3 | condition_4) & data_amp_congruence$congruence == 0
# Output the logical vector indicating congruence correctness
print(congruence_correctness)
# Check
congruence_correctness <- ifelse(
(data_amp_congruence$trialcode_binary == 1 & grepl("_positive$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 1 & data_amp_congruence$congruence == 0) |
(data_amp_congruence$trialcode_binary == 0 & grepl("_negative$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 0 & data_amp_congruence$congruence == 0) |
(data_amp_congruence$trialcode_binary == 0 & grepl("_positive$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 0 & data_amp_congruence$congruence == 0) |
(data_amp_congruence$trialcode_binary == 1 & grepl("_negative$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 1 & data_amp_congruence$congruence == 0),
TRUE, FALSE
)
congruence_correctness
data_amp_congruence
# Check
congruence_correctness <- ifelse(
(grepl("_positive$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 1 & data_amp_congruence$congruence == 0) |
(data_amp_congruence$trialcode_binary == 0 & grepl("_negative$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 0 & data_amp_congruence$congruence == 0) |
(data_amp_congruence$trialcode_binary == 0 & grepl("_positive$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 0 & data_amp_congruence$congruence == 0) |
(data_amp_congruence$trialcode_binary == 1 & grepl("_negative$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 1 & data_amp_congruence$congruence == 0),
TRUE, FALSE
)
congruence_correctness
# Check
congruence_correctness <- ifelse(
(grepl("_positive$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 1 & data_amp_congruence$congruence == 1) |
(grepl("_positive$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 0 & data_amp_congruence$congruence == 0) |
(grepl("_negative$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 0 & data_amp_congruence$congruence == 1) |
(grepl("_negative$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 1 & data_amp_congruence$congruence == 0),
TRUE, FALSE
)
congruence_correctness
congruence_correctness |> all()
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
group_by(subject) |>
count() |>
ungroup() |>
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) |>
select(-n)
# data_amp_completeness |>
#   count(n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
data_amp_congruence <- data_amp_raw |>
select(subject, evaluative_response = correct, trialcode, blockcode) |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(trialcode_binary = ifelse(trialcode == "prime_positive", 1, 0),
congruence = ifelse(trialcode_binary == evaluative_response, 1, 0))
# check if congruence is 0 when trialcode ends with _positive and evaluative_response is 1 and when trialcode ends with _negative and evaluative_response is 0, and if congruence is 0 when trialcode ends with _positive and evaluative_response is 0 and when trialcode ends with _negative and evaluative_response is 1
congruence_correctness <- ifelse(
(grepl("_positive$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 1 & data_amp_congruence$congruence == 1) |
(grepl("_positive$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 0 & data_amp_congruence$congruence == 0) |
(grepl("_negative$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 0 & data_amp_congruence$congruence == 1) |
(grepl("_negative$", data_amp_congruence$trialcode) & data_amp_congruence$evaluative_response == 1 & data_amp_congruence$congruence == 0),
TRUE, FALSE
)
congruence_correctness |> all()
# this check is okay
# summarize by subject
data_amp_score <- data_amp_congruence |>
group_by(subject) |>
summarize(amp_score = mean(congruence, na.rm = TRUE)) |>
select(subject, amp_score)
# Check if the new variable is numeric and is between the value 0 and 1
(is.numeric(data_amp_score$amp_score) & data_amp_score$amp_score |> between(0, 1)) |> all()
# this check is okay
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject") |>
full_join(data_amp_completeness, by = "subject") |>
full_join(data_amp_score, by = "subject")
# flag all subjects with more than one row in the wide-format data. these should be excluded in the analysis.
# a more elaborate approach would be to track down the individual dupicate cases and determine which of the mulitiple cases should be retained.
data_processed_duplicates <- data_processed_temp |>
count(subject) |>
mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include")) |>
select(-n)
# join in the duplicates df
data_processed_before_exclusions <- data_processed_temp |>
full_join(data_processed_duplicates, by = "subject")
# create a master exclude_participant variable
data_processed <- data_processed_before_exclusions |>
mutate(exclude_participant = case_when(tolower(age) == "test" ~ "exclude",
tolower(gender) == "test" ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
# in this case we will exclude participants with missing demographics data or outcomes measures data.
# Note that "list-wise exclusions" like this aren't always justified, as missingness often isn't at random.
# How to treat missing data is a  whole area of work in itself, which we wont cover here.
is.na(age) ~ "exclude",
is.na(gender) ~ "exclude",
exclude_amp_performance == "exclude" ~ "exclude",
exclude_duplicate_data == "exclude" ~ "exclude",
exclude_amp_completeness == "exclude" ~ "exclude",
is.na(amp_score) ~ "exclude",
TRUE ~ "include"))
# save data to disk in that dir
write_csv(data_processed, "../data/processed/data_processed.csv")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(kableExtra)
library(kableExtra)
library(janitor)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE)) |>
mutate(group = "Full sample")
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 2)) |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE)) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE))
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 2)) |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_amp_score <- data_processed_after_exclusions |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(mean_score, na.rm = TRUE)) |>
mutate(group = "Full sample")
# overall self-reported evaluations
dat_mean_amp_score <- data_processed_after_exclusions |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE)) |>
mutate(group = "Full sample")
dat_mean_amp_score
# self-reported evaluations by gender category
dat_mean_amp_score_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
# combine both into one table
bind_rows(dat_mean_amp_score,
dat_mean_amp_score_by_gender) |>
select(Subset = group, Mean, SD) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "AMP Score" = 2)) |>
kable_classic(full_width = FALSE)
dat_mean_amp_score_by_gender
# combine both into one table
bind_rows(dat_mean_amp_score,
dat_mean_amp_score_by_gender) |>
select(Subset = group, Mean, SD) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 3) |>
kable() |>
add_header_above(header = c(" " = 1, "AMP Score" = 2)) |>
kable_classic(full_width = FALSE)
library(tidyverse)
library(patchwork)
ldt_data <- read_csv("C:/Users/sarah/Downloads/ldt_data.csv")
ldt_data
library(tidyverse)
library(patchwork)
ldt_data <- read_csv("C:/Users/sarah/Downloads/ldt_data.csv")
dat <- read_csv("C:/Users/sarah/Downloads/ldt_data.csv")
summary(dat)
str(dat)
dat <- mutate(dat, language = factor(
x = language, # column to translate
levels = c(1, 2), # values of the original data in preferred order
labels = c("monolingual", "bilingual") # labels for display
))
dat <- mutate(dat, language = factor(
x = language, # column to translate
levels = c(1, 2), # values of the original data in preferred order
labels = c("monolingual", "bilingual") # labels for display
))
dat
dat <- mutate(dat, language = factor(
x = language, # column to translate
levels = c(1, 2), # values of the original data in preferred order
labels = c("monolingual", "bilingual") # labels for display
))
